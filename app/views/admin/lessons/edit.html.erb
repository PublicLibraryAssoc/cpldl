<%= render "form" %>

<hr>

<h1>Lessons</h1>
<p class="emphasis">
  Drag and drop the lessons to reorder them. Click on a lesson to edit it in the form above.
</p>
<div class="clearfix">
  <div class="sortable-list" data-page="lessons">
    <div class="objects sortable grid reorderable">
      <% @course.lessons.where.not(pub_status: "A").each do |lesson| %>
        <div class="sortable-item" data-id="<%= lesson.id %>">
          <%= render partial: "shared/lessons/admin_lesson_grid",
                      locals: { course: @course, lesson: lesson }%>
        </div>
      <% end %>
    </div>
  </div>
</div>

<%= link_to new_admin_course_lesson_path, class: "transparent" do %>
  <div class="btn">
    Add Another Lesson
  </div>
<% end %>

<%= link_to edit_admin_course_path(@course), class: "transparent" do %>
  <div class="btn btn-grey">
    Return To Course Edit Page
  </div>
<% end %>

<%= javascript_tag do %>
  (function($){

    $.fn.simplyCountable = function(options){

      options = $.extend({
        counter:            '#counter',
        countType:          'characters',
        maxCount:           140,
        strictMax:          false,
        countDirection:     'down',
        safeClass:          'safe',
        overClass:          'over',
        thousandSeparator:  ',',
        onOverCount:        function(){},
        onSafeCount:        function(){},
        onMaxCount:         function(){}
      }, options);

      var navKeys = [33,34,35,36,37,38,39,40];

      return $(this).each(function(){

        var countable = $(this);
        var counter = $(options.counter);
        if (!counter.length) { return false; }

        var countCheck = function(){

          var count;
          var revCount;

          var reverseCount = function(ct){
            return ct - (ct*2) + options.maxCount;
          }

          var countInt = function(){
            return (options.countDirection === 'up') ? revCount : count;
          }

          var numberFormat = function(ct){
            var prefix = '';
            if (options.thousandSeparator){
              ct = ct.toString();
              // Handle large negative numbers
              if (ct.match(/^-/)) {
                ct = ct.substr(1);
                prefix = '-';
              }
              for (var i = ct.length-3; i > 0; i -= 3){
                ct = ct.substr(0,i) + options.thousandSeparator + ct.substr(i);
              }
            }
            return prefix + ct;
          }

          var changeCountableValue = function(val){
            countable.val(val).trigger('change');
          }

          /* Calculates count for either words or characters */
          if (options.countType === 'words'){
            count = options.maxCount - $.trim(countable.val()).split(/\s+/).length;
            if (countable.val() === ''){ count += 1; }
          }
          else { count = options.maxCount - countable.val().length; }
          revCount = reverseCount(count);

          /* If strictMax set restrict further characters */
          if (options.strictMax && count <= 0){
            var content = countable.val();
            if (count < 0) {
              options.onMaxCount(countInt(), countable, counter);
            }
            if (options.countType === 'words'){
              var allowedText = content.match( new RegExp('\\s?(\\S+\\s+){'+ options.maxCount +'}') );
              if (allowedText) {
                changeCountableValue(allowedText[0]);
              }
            }
            else { changeCountableValue(content.substring(0, options.maxCount)); }
            count = 0, revCount = options.maxCount;
          }

          counter.text(numberFormat(countInt()));

          /* Set CSS class rules and API callbacks */
          if (!counter.hasClass(options.safeClass) && !counter.hasClass(options.overClass)){
            if (count < 0){ counter.addClass(options.overClass); }
            else { counter.addClass(options.safeClass); }
          }
          else if (count < 0 && counter.hasClass(options.safeClass)){
            counter.removeClass(options.safeClass).addClass(options.overClass);
            options.onOverCount(countInt(), countable, counter);
          }
          else if (count >= 0 && counter.hasClass(options.overClass)){
            counter.removeClass(options.overClass).addClass(options.safeClass);
            options.onSafeCount(countInt(), countable, counter);
          }

        };

        countCheck();

        countable.on('keyup blur paste', function(e) {
          switch(e.type) {
            case 'keyup':
              // Skip navigational key presses
              if ($.inArray(e.which, navKeys) < 0) { countCheck(); }
              break;
            case 'paste':
              // Wait a few miliseconds if a paste event
              setTimeout(countCheck, (e.type === 'paste' ? 5 : 0));
              break;
            default:
              countCheck();
              break;
          }
        });

      });

    };

  })(jQuery);

  $(document).ready(function(){
    var set_positions = function(){
      // loop through and give each task a data-pos
      // attribute that holds its position in the DOM
      $(".panel.panel-default").each(function(i){
          $(this).attr("data-pos",i+1);
      });
    }
    // call set_positions function
    set_positions();

    $(".sortable").sortable();

    // after the order changes
    $(".sortable").sortable().bind("sortupdate", function(e, ui) {
      // array to store new order
      updated_order = []
      // set the updated positions
      set_positions();

      // populate the updated_order array with the new task positions
      $(".sortable-item").each(function(i){
          updated_order.push({ id: $(this).data("id"), position: i+1 });
      });

      // send the updated order via ajax
      $.ajax({
          type: "PUT",
          url: "/admin/" + $(".sortable-list").data("page") + "/sort",
          // url: '/admin/courses/sort',
          data: { order: updated_order }
      });
    });

    // If the seo title is empty, prepopulate with title value.
    $("body").on("blur", "#lesson_title", function() {
      if($("#lesson_seo_page_title").val().trim() === "") {
        $("#lesson_seo_page_title").val($("#lesson_title").val());
      }
    });

    $("#lesson_title").simplyCountable({
      counter: "#lesson_title_counter",
      countable: "characters",
      maxCount: 90,
      strictMax: true,
      countDirection: "down"
    });

    $("#lesson_summary").simplyCountable({
      counter: "#lesson_summary_counter",
      countable: "characters",
      maxCount: 156,
      strictMax: true,
      countDirection: "down"
    });

    $("#lesson_seo_page_title").simplyCountable({
      counter: "#lesson_seo_page_title_counter",
      countable: "characters",
      maxCount: 90,
      strictMax: true,
      countDirection: "down"
    });

    $("#lesson_meta_desc").simplyCountable({
      counter: "#lesson_meta_desc_counter",
      countable: "characters",
      maxCount: 156,
      strictMax: true,
      countDirection: "down"
    });
  });
<% end %>
